{"version":3,"file":"static/js/231.98796ec2.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://react-homework-template/./src/components/TextField/textField.module.css?744c","components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","components/LoginForm/fields.js","webpack://react-homework-template/./src/components/LoginForm/loginForm.module.css?9d59","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"textField_wrapper__RNTc2\",\"field\":\"textField_field__u4wsG\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport css from './textField.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={css.wrapper}>\n      <label htmlFor={id}>{label}</label>\n      <input className={css.field} id={id} onChange={handleChange} {...props} />\n    </div>\n  );\n};\n\nexport default TextField;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","const fields = {\n  email: {\n    type: 'email',\n    name: 'email',\n    required: true,\n    label: 'User email',\n    placeholder: 'User email',\n  },\n  password: {\n    type: 'password',\n    name: 'password',\n    required: true,\n    label: 'User password',\n    placeholder: 'User password',\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"loginForm_form__Y03VC\",\"formBtn\":\"loginForm_formBtn__Yqvrt\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TextField from '../TextField/TextField';\nimport fields from './fields';\n\nimport css from './loginForm.module.css';\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ email, password });\n    setState({ ...initialState });\n  };\n\n  const { email, password } = state;\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <TextField value={email} handleChange={handleChange} {...fields.email} />\n      <TextField\n        value={password}\n        handleChange={handleChange}\n        {...fields.password}\n      />\n      <button className={css.formBtn} type=\"submit\">\n        Login\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n\nLoginForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useDispatch } from 'react-redux';\n// import { Navigate } from 'react-router-dom';\n\nimport { login } from '../../redux/auth/auth-operations';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n\n  const handleLogin = data => {\n    dispatch(login(data));\n  };\n\n  //   if (isLogin) {\n  //     return <Navigate to=\"/phonebook\" />;\n  //   }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"page-title\">Login page</h1>\n      <LoginForm onSubmit={handleLogin} />\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","label","handleChange","props","id","useMemo","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","className","css","htmlFor","onChange","email","type","name","required","placeholder","password","initialState","onSubmit","useState","state","setState","e","value","prevState","preventDefault","TextField","fields","dispatch","useDispatch","data","login"],"sourceRoot":""}